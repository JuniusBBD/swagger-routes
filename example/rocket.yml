swagger: '2.0'
info:
  title: Rocket Services Draft
  version: 1.0.0
  description: |
    An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications.
    This in turn makes client integration easier and reduces the complexity and size of front-end applications.
  
    Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that
    best suits the application they are developing.
  
    Pointing at https://apollo.massivision.com environment.
  
    See https://wiki.massiveinteractive.com/pages/viewpage.action?pageId=2589508
host: '127.0.0.1:8002'
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  accountAuth:
    type: oauth2
    description: Account JWT token
    flow: password
    tokenUrl: 'http://127.0.0.1:8002/account/authorization'
    x-authorize: 'isl/security/account.js'
    scopes:
      Catalog: Access all read only content
      Commerce: Perform account level transactions
      Settings: Modify account settings
  profileAuth:
    type: oauth2
    description: Profile JWT token
    flow: password
    tokenUrl: http://127.0.0.1:8002/account/profile/authorization
    x-authorize: isl/security/profile.js
    scopes:
      Catalog: Modify profile preferences and activity (bookmarks, watch list)
paths:
  /account:
    get:
      description: Get the details of an account along with the profiles and entitlements under it.
      operationId: getAccount
      produces:
        - application/json
      tags:
        - account
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Account'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - accountAuth:
          - Catalog
  /account/entitlements:
    get:
      description: |
        Get all entitlements under the account.
    
        This list is returned under the call to get account information so a call here is
        only required when wishing to refresh a local copy of entitlements.
      operationId: getEntitlements
      produces:
        - application/json
      tags:
        - account
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Entitlement'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - accountAuth:
          - Catalog
  /account/profile:
    get:
      description: Get the details of the active profile, including watched, bookmarked and rated items.
      operationId: getProfile
      produces:
        - application/json
      tags:
        - profile
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileDetail'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/bookmarks:
    get:
      description: Get the map of bookmarked item ids (itemId => creationDate).
      operationId: getBookmarks
      produces:
        - application/json
      tags:
        - profile
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
              format: date
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/bookmarks/{itemId}:
    get:
      description: Get the bookmark for an item.
      operationId: getItemBookmark
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          type: string
          description: The id of the item to get the bookmark for.
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Bookmark'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
    put:
      description: |
        Bookmark an item.
    
        Creates one if it doesn't exist, overwrites one if it does.
      operationId: bookmarkItem
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          type: string
          description: The id of the item to bookmark.
          required: true
      responses:
        '200':
          description: Bookmark created.
          schema:
            $ref: '#/definitions/Bookmark'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
    delete:
      description: Unbookmark an item.
      operationId: deleteItemBookmark
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          type: string
          description: The identifier of the bookmark to delete.
          required: true
      responses:
        '204':
          description: Bookmark deleted.
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/bookmarks/list:
    get:
      description: Returns the list of bookmarked items under the authenticated profile.
      operationId: getBookmarkList
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 50.
        - name: order
          in: query
          type: string
          description: "The 'date-added' sort order of the returned list, either 'asc' or 'desc'. Defaults to 'desc'."
          default: desc
          enum:
            - asc
            - desc
        - $ref: '#/parameters/ItemTypes'
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/ratings:
    get:
      description: Get the map of rated item ids (itemId => rating out of 10).
      operationId: getRatings
      produces:
        - application/json
      tags:
        - profile
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/ratings/{itemId}:
    get:
      description: Get the rating info for an item.
      operationId: getItemRating
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          description: The id of the item to get the rating info for.
          in: path
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserRating'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
    put:
      description: |
        Rate an item.
    
        Creates one if it doesn't exist, overwrites one if it does.
      operationId: rateItem
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          description: The id of the item to rate.
          in: path
          type: string
          required: true
        - name: rating
          description: The item rating between 1 and 10 inclusive.
          in: query
          type: integer
          required: true
          minimum: 1
          maximum: 10
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/UserRating'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/ratings/list:
    get:
      description: Returns the list of rated items under the authenticated profile.
      operationId: getRatingsList
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 50.
        - name: order
          in: query
          type: string
          description: "The 'date-added' sort order of the returned list, either 'asc' or 'desc'. Defaults to 'desc'."
          default: desc
          enum:
            - asc
            - desc
        - $ref: '#/parameters/ItemTypes'
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/watched:
    get:
      description: Get the map of watched item ids (itemId => last playhead position).
      operationId: getWatched
      produces:
        - application/json
      tags:
        - profile
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/watched/{itemId}:
    get:
      description: Get the watched status info for an item.
      operationId: getItemWatchedStatus
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          type: string
          description: The id of the item to get the watched status for.
          default: '81521'
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Watched'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /account/profile/watched/list:
    get:
      description: Returns the list of watched items under the authenticated profile.
      operationId: getWatchedList
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 50.
        - name: order
          in: query
          type: string
          description: "The 'date-added' sort order of the returned list, either 'asc' or 'desc'. Defaults to 'desc'."
          default: desc
          enum:
            - asc
            - desc
        - $ref: '#/parameters/ItemTypes'
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - profileAuth:
          - Catalog
  /authorization:
    post:
      description: Request an account level authorization token.
      operationId: getAccountToken
      produces:
        - application/json
      tags:
        - authorization
      parameters:
        - name: body
          description: The account credentials with requested token scope.
          in: body
          schema:
            $ref: '#/definitions/AccountTokenRequest'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /authorization/profile:
    post:
      description: Request a profile level authorization token.
      operationId: getProfileToken
      produces:
        - application/json
      tags:
        - authorization
      parameters:
        - name: body
          description: The profile id and optional pin with required token scope.
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProfileTokenRequest'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - accountAuth:
          - Catalog
  /authorization/refresh:
    get:
      description: Refresh an account or profile level authorization token which is marked as refreshable.
      operationId: refreshToken
      produces:
        - application/json
      tags:
        - authorization
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AccessToken'
        '400':
          description: Bad request.
        '401':
          description: Invalid access token.
        '403':
          description: Forbidden.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
      security:
        - accountAuth: []
        - profileAuth: []
  /items/{id}:
    get:
      description: Returns the details of an item with the specified id.
      operationId: getItem
      produces:
        - application/json
      tags:
        - content
      parameters:
        - name: id
          in: path
          type: string
          description: The identifier of the item to load.
          required: true
        - name: max_rating
          in: query
          type: string
          description: "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."
        - name: expand
          description: |
            If no value is specified no dependencies are expanded.
    
            If 'children' is specified then the list of any direct children will be expanded. For example
            seasons of a show or episodes of a season.
    
            If 'all' is specified then the parent chain will be expanded along with any child list at each level.
            For example if an episode is specified then its season will be expanded and that season's episode list.
            The season will have its show expanded and the show will have its season list expanded.
    
            The 'all' options is useful when you deep link into a show/season/episode for the first time as
            it provides full context for navigating around the show page. Subsequent navigation around
            children of the show should only need to request expand of children.
    
            If an expand is specified which is not relevant to the item type, it will be ignored.
          in: query
          type: string
          enum:
            - all
            - children
    
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The item requested
          schema:
            $ref: '#/definitions/ItemDetail'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /items/{id}/children:
    get:
      description: |
        Returns the List of child summary items under an item.
    
        If the item is a Season then the children will be episodes and ordered by episode number.
    
        If the item is a Show then the children will be Seasons and ordered by season number.
    
        Returns 404 if no children found.
      operationId: getItemChildrenList
      produces:
        - application/json
      tags:
        - content
      parameters:
        - name: id
          in: path
          type: string
          description: The identifier of the item whose children to load.
          required: true
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 12.
        - name: max_rating
          in: query
          type: string
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
        - name: order
          in: query
          type: string
          description: |
            The sort order of the returned list, either 'asc' or 'desc'. Defaults to 'asc'.
            If a list of Seasons the list is ordered by season number.
            If a list of Episodes the list is ordered by episode number.
          enum:
            - asc
            - desc
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /items/{id}/related:
    get:
      description: |
        Returns the list of items related to the parent item.
    
        Note for now, due to the size of the list being unknown, only a single page will be returned.
    
      operationId: getItemRelatedList
      produces:
        - application/json
      tags:
        - content
      parameters:
        - name: id
          in: path
          type: string
          description: The identifier of the item to based related items off.
          required: true
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 12.
        - name: max_rating
          in: query
          type: string
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /lists/{id}:
    get:
      description: Returns a list of items under the specified item list
      operationId: getList
      produces:
        - application/json
      tags:
        - content
      parameters:
        - name: id
          in: path
          type: string
          description: The identifier of the list to load.
          default: '82208'
          required: true
        - name: page
          in: query
          type: integer
          description: The page of items to load. 1 based. Defaults to page 1.
        - name: page_size
          in: query
          type: integer
          description: The number of items to return in a page. Defaults to 50.
        - name: max_rating
          in: query
          type: string
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
        - name: order
          in: query
          type: string
          description: The sort order of the returned list, either 'asc' or 'desc'. Defaults to unspecified.
          enum:
            - asc
            - desc
        - name: order_by
          in: query
          type: string
          description: What to order by. Defaults to unspecified.
          enum:
            - 'a-z'
            - 'release-year'
            - 'date-added'
        - name: param
          in: query
          type: string
          description: "The list parameter in format 'key:value', e.g. 'genre:action'."
        - $ref: '#/parameters/ItemTypes'
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The list of items requested.
          schema:
            $ref: '#/definitions/ItemList'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /page:
    get:
      description: Returns a page with the specified id.
      operationId: getPage
      produces:
        - application/json
      tags:
        - site
      parameters:
        - name: path
          in: query
          required: true
          default: /
          type: string
          description: "The path of the page to load, e.g. '/movie/76061'."
        - name: list_page_size
          in: query
          type: integer
          description: >
                The number of items to load when prefetching and
                paging each list in the page. Defaults to 12.
        - name: max_list_prefetch
          in: query
          type: integer
          description: The maximum number of lists to prefetch in the page. Defaults to 5.
        - name: max_rating
          in: query
          type: string
          description: "The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'."
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: The page requested.
          schema:
            $ref: '#/definitions/Page'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /search:
    get:
      description: Search the catalog of items and people.
      operationId: search
      produces:
        - application/json
      tags:
        - content
      parameters:
        - name: term
          description: The search term to query.
          in: query
          type: string
          required: true
        - name: max_results
          description: The maximum number of results to return.
          in: query
          type: integer
          default: 20
          minimum: 1
          maximum: 50
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/SearchResults'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
  /sitemap:
    get:
      description: Returns the site map for the given device.
      operationId: getSitemap
      produces:
        - application/json
      tags:
        - site
      parameters:
        - $ref: '#/parameters/DeviceTypes'
        - $ref: '#/parameters/Subscriptions'
      responses:
        '200':
          description: "The sitemap - a list of SiteMapEntry's"
          schema:
            type: array
            items:
              $ref: '#/definitions/SitemapEntry'
        '400':
          description: Bad request.
        '404':
          description: Not found.
        '500':
          description: Internal server error.
        default:
          description: Service error.
          schema:
            $ref: '#/definitions/ServiceError'
definitions:
  AccessToken:
    type: object
    required:
      - value
      - refreshable
      - expirationDate
      - type
    properties:
      value:
        description: The token value used for authenticated requests.
        type: string
      refreshable:
        description: True if this token can be refreshed, false if not.
        type: boolean
      expirationDate:
        description: The timestamp this token expires.
        type: string
        format: date
      type:
        description: The type of the token.
        type: string
        enum:
          - UserAccount
          - UserProfile
  Account:
    type: object
    required:
      - id
      - trackingEnabled
      - primaryProfileId
      - profiles
    properties:
      id:
        description: The id of the account.
        type: string
      trackingEnabled:
        description: Whether usage tracking is associated with an account or anonymous.
        type: boolean
      primaryProfileId:
        description: The id of the primary profile.
        type: string
      defaultPaymentInstrumentId:
        description: The id of the payment instrument to use by default for account transactions.
        type: string
      subscriptions:
        description: The list of subscriptions, if any, the account has signed up to.
        type: array
        items:
          $ref: '#/definitions/Subscription'
      profiles:
        description: The list of profiles under this account.
        type: array
        items:
          $ref: '#/definitions/ProfileSummary'
      entitlements:
        description: The list of entitlements to playback specific items.
        type: array
        items:
          $ref: '#/definitions/Entitlement'
  AccountTokenRequest:
    type: object
    required:
      - email
      - password
      - scope
    properties:
      email:
        description: The email associated with the account.
        type: string
      password:
        description: The password associated with the account.
        type: string
      scope:
        description: The scope of the token required, e.g. 'Catalog'.
        type: string
    example:
      email: ''
      password: ''
      scope: Catalog
  Bookmark:
    type: object
    required:
      - itemId
      - creationDate
    properties:
      itemId:
        description: The id of the item bookmarked.
        type: string
      creationDate:
        description: The date the bookmark was created.
        type: string
        format: date
  Classification:
    type: object
    required:
      - name
      - code
      - level
    properties:
      name:
        description: The name of the classification for display
        type: string
      code:
        description: The unique code which pairs the classification and system
        type: string
      level:
        description: The level of this classification when compared with its siblings. A higher level means a greater restriction. Each classification in a system should have a unique level.
        type: integer
        format: int32
  Credit:
    allOf:
      - $ref: '#/definitions/Person'
      - type: object
      - required:
        - role
        - character
      - properties:
          role:
            description: The type of role the credit performed, e.g. actor.
            type: string
            enum:
              - actor
              - associateproducer
              - coactor
              - director
              - executiveproducer
              - filminglocation
              - guest
              - narrator
              - other
              - presenter
              - producer
              - productmanager
              - thememusicby
              - voice
              - writer
          character:
            description: The name of the character.
            type: string
  Entitlement:
    allOf:
      - $ref: '#/definitions/OfferRights'
      - type: object
      - properties:
          isActivated:
            description: Whether the account has played the entitlement at least once.
            type: boolean
          activationDate:
            type: string
            format: date
          expirationDate:
            type: string
            format: date
          creationDate:
            type: string
            format: date
          playCount:
            description: How many times the media has been played.
            type: integer
            format: int32
          downloadCount:
            description: How many times the media has been downloaded.
            type: integer
            format: int32
  ExclusionRule:
    type: object
    description: Defines playback exclusion rules for an Offer or Entitlement.
    properties:
      description:
        type: string
      device:
        description: The device type that the exclusion rules apply to.
        type: string
      excludeAirplay:
        description: Prevent airplay from an apple device.
        type: boolean
      excludeChromecast:
        descripition: Prevent chromecasting.
        type: boolean
      excludeDelivery:
        description: Prevent a specific delivery.
        type: string
        enum:
          - Stream
          - Download
          - StreamOrDownload
          - ProgressiveDownload
      excludeMinResolution:
        description: Prevent playback of the defined or greater resolution.
        type: string
        enum:
          - SD
          - HD-720
          - HD-1080
  ItemDetail:
    allOf:
      - $ref: '#/definitions/ItemSummary'
      - type: object
      - properties:
          distributor:
            type: string
            description: The distributor of this item.
          description:
            type: string
            description: The description of this item.
          credits:
            type: array
            description: A list of credits associated with this item.
            items:
              $ref: '#/definitions/Credit'
          seasons:
            $ref: '#/definitions/ItemList'
            description: A list of seasons associated with this item.
          episodes:
            $ref: '#/definitions/ItemList'
            description: A list of episodes associated with this item.
          season:
            $ref: '#/definitions/ItemDetail'
            description: The season associated with this item.
          show:
            $ref: '#/definitions/ItemDetail'
            description: The season associated with this item.
          media:
            type: array
            description: A list of media associated with this item.
            items:
              $ref: '#/definitions/Media'
          trailers:
            type: array
            description: A list of trailers associated with this item.
            items:
              $ref: '#/definitions/Trailer'
  ItemList:
    type: object
    required:
      - id
      - size
      - items
      - paging
    description: A pageable list of items.
    properties:
      id:
        type: string
        description: The id of this list
      title:
        type: string
        description: The title of this list
      itemTypes:
        type: array
        description: The types of items in the list
        items:
          type: string
      size:
        type: integer
        description: The total size of the list
      items:
        type: array
        description: A list of items
        items:
          $ref: '#/definitions/ItemSummary'
      images:
        type: object
        additionalProperties:
          type: string
      paging:
        $ref: '#/definitions/Pagination'
        description: Metadata describing how to load the next or previous page of the list
  ItemSummary:
    type: object
    required:
      - id
      - type
    discriminator: type
    properties:
      id:
        type: string
        description: Unique identifier for an Item
      type:
        description: The type of item
        type: string
        enum:
          - movie
          - show
          - season
          - episode
          - link
          - trailer
      title:
        type: string
        description: The title of the item
      shortTitle:
        type: string
        description: The short title of the item
      shortDescription:
        type: string
        description: A truncated description of the item
      tagline:
        type: string
        description: The tagline of the item
      classification:
        $ref: '#/definitions/Classification'
        description: The classification of the item.
      path:
        type: string
        description: The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
      releaseYear:
        type: integer
        description: The year this item was released
      episodeCount:
        type: integer
        description: The number of episodes in the season, if the item is a season.
      availableEpisodeCount:
        type: integer
        description: The number of available episodes in the season, if the item is a season.
      seasonNumber:
        type: integer
        description: The number of a season, if the item is a season.
      episodeNumber:
        type: integer
        description: The number of an episode, if the item is an episode.
      averageUserRating:
        type: number
        description: The average user rating
      badges:
        type: array
        description: The list of badges this item has
        items:
          type: string
      genres:
        type: array
        description: The list of genres this item belongs to
        items:
          type: string
      images:
        type: object
        additionalProperties:
          type: string
  Media:
    type: object
    required:
      - name
      - deliveryType
      - drm
      - duration
      - format
      - resolution
      - width
      - height
      - language
    properties:
      name:
        type: string
      deliveryType:
        type: string
        enum:
          - Stream
          - Download
          - StreamOrDownload
          - ProgressiveDownload
      drm:
        type: string
        enum:
          - Widevine
          - PlayReady
          - None
      duration:
        type: integer
        format: int64
      format:
        type: string
      resolution:
        type: string
        enum:
          - SD
          - HD-720
          - HD-1080
      width:
        type: integer
        format: int32
      height:
        type: integer
        format: int32
      language:
        type: string
        description: The language code for this media, e.g. 'en'.
  Offer:
    allOf:
      - $ref: '#/definitions/OfferRights'
      - type: object
      - properties:
          description:
            type: string
          price:
            type: number
            format: float
          startDate:
            type: string
            format: date
          endDate:
            type: string
            format: date
          availability:
            type: string
            enum:
              - Available
              - ComingSoon
  OfferRights:
    type: object
    description: The base type for both Offer and Entitlement.
    required:
      - name
      - deliveryType
      - scopes
      - resolution
      - ownership
      - maxPlays
      - maxDownloads
      - rentalPeriod
      - playPeriod
      - exclusionRules
    properties:
      name:
        type: string
      deliveryType:
        type: string
        enum:
          - Stream
          - Download
          - StreamOrDownload
          - ProgressiveDownload
      scopes:
        type: array
        items:
          type: string
      resolution:
        type: string
        enum:
          - SD
          - HD-720
          - HD-1080
      ownership:
        type: string
        enum:
          - Free
          - Rent
          - Own
          - None
      maxPlays:
        type: integer
        format: int32
        description: The maximum number of allowed plays.
      maxDownloads:
        type: integer
        format: int32
        description: The maximum number of allowed downloads.
      rentalPeriod:
        type: integer
        format: int32
        description: The length of time in minutes which the rental will last once purchased.
      playPeriod:
        type: integer
        format: int32
        description: The length of time in minutes which the rental will last once played for the first time.
      exclusionRules:
        type: array
        description: Any specific playback exclusion rules.
        items:
          $ref: '#/definitions/ExclusionRule'
  Page:
    type: object
    required:
      - id
      - title
      - entries
    properties:
      id:
        type: string
        description: Unique identifier for Page
      title:
        type: string
        description: The name of the Page
      entries:
        type: array
        description: Entries of a page
        items:
          $ref: '#/definitions/PageEntry'
  PageEntry:
    type: object
    required:
      - type
      - title
      - template
    description: A page entry
    properties:
      type:
        type: string
        description: PageEntry type
      title:
        type: string
        description: The name of the Page Entry
      template:
        type: string
        description: Template type
      item:
        $ref: '#/definitions/ItemSummary'
        description: The item to be represented by this PageEntry
      list:
        $ref: '#/definitions/ItemList'
        description: The list of items to be represented by this PageEntry
  Pagination:
    type: object
    required:
      - total
    properties:
      next:
        type: string
        description: Url to load next page of data, or null if not available
      previous:
        type: string
        description: Url to load previous page of data, or null if not available.
      total:
        type: integer
        description: The total number of pages available given the current page size.
  Person:
    type: object
    required:
      - name
      - path
    properties:
      name:
        description: The name of the person.
        type: string
      path:
        description: The path to the person
        type: string
  ProfileDetail:
    allOf:
      - $ref: '#/definitions/ProfileSummary'
      - properties:
          watched:
            description: A map of watched itemIds => last watched position
            type: object
            additionalProperties:
              type: integer
              format: int32
          rated:
            description: A map of rated itemIds => rating out of 10
            type: object
            additionalProperties:
              type: integer
              format: int32
          bookmarked:
            description: A map of bookmarked itemIds => created date
            type: object
            additionalProperties:
              type: string
              format: date
  ProfileSummary:
    type: object
    required:
      - id
      - name
      - isActive
      - pinEnabled
      - walletPurchaseEnabled
      - accountPurchaseEnabled
      - marketingEnabled
    properties:
      id:
        type: string
        description: The id of the profile.
      name:
        type: string
        description: The unique name of the profile.
      isActive:
        type: boolean
        description: Whether the profile is active or not.
      pinEnabled:
        type: boolean
        description: Whether a pin is required to entry the profile.
      walletPurchaseEnabled:
        type: boolean
        description: Whether the profile can make purchases with their wallet.
      accountPurchaseEnabled:
        type: boolean
        description: Whether the profile can make purchases with the account payment options.
      marketingEnabled:
        type: boolean
        description: Whether the profile has opted in or out of marketing material.
      maxRatingContentFilter:
        type: string
        description: The maximum rating (inclusive) of content to return in feeds.
      minRatingPlaybackGuard:
        type: string
        description: The minumum rating (inclusive) of content where an account pin should be presented before entring playback.
  ProfileTokenRequest:
    type: object
    required:
      - profileId
      - scope
    properties:
      profileId:
        type: string
        description: The id of the profile the token should grant access rights to.
      pin:
        type: string
        description: The pin associated with this profile, if any.
      scope:
        type: string
        description: The scope of the token required, e.g. 'Catalog'.
  RateItemRequest:
    type: object
    required:
      - rating
    properties:
      rating:
        type: integer
        description: The rating between 1 and 10 for the item.
        default: 5
        minimum: 1
        maximum: 10
  SearchResults:
    type: object
    required:
      - items
      - people
    properties:
      term:
        description: The search term
        type: sting
      total:
        description: The total number of items AND peope returned
        type: integer
        format: int32
        minimum: 0
      items:
        description: The list of items relevent to the search term.
        $ref: '#/definitions/ItemList'
      people:
        description: The list of people relevent to the search term.
        type: array
        items:
          $ref: '#/definitions/Person'
  ServiceError:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: A description of the error.
      code:
        type: integer
        description: An optional code classifying the error. Should be taken in the context of the http status code.
  SitemapEntry:
    type: object
    required:
      - pageId
      - path
      - title
      - isSystemPage
    properties:
      title:
        description: Title of the page
        type: string
      pageId:
        description: Unique identifier for Page the entry references.
        type: string
      path:
        description: Unique path for Page the entry references.
        type: string
      key:
        description: Key used to lookup Page type.
        type: string
      template:
        description: Identifier for of the page template to render this page.
        type: string
      isSystemPage:
        description: True if this page is a system static page type.
        type: boolean
  Subscription:
    type: object
    required:
      - name
      - startDate
      - endDate
    properties:
      name:
        type: string
      startDate:
        description: The start date of this subscription
        type: string
        format: date
      endDate:
        description: The end date of this subscription
        type: string
        format: date
  Trailer:
    type: object
    required:
      - id
      - title
    discriminator: type
    properties:
      id:
        description: Unique identifier for the trailer.
        type: string
      title:
        description: The title of the trailer.
        type: string
      shortDescription:
        description: A truncated description of the trailer
        type: string
      classification:
        description: The classification of the trailer.
        $ref: '#/definitions/Classification'
      images:
        type: object
        additionalProperties:
          type: string
      media:
        description: A list of media associated with the trailer.
        type: array
        items:
          $ref: '#/definitions/Media'
  UserRating:
    type: object
    required:
      - itemId
      - rating
    properties:
      itemId:
        type: string
        description: The id of the item rated.
      rating:
        description: The rating out of 10
        type: integer
        format: int32
        minimum: 1
        maximum: 10
  Watched:
    type: object
    required:
      - itemId
      - position
      - creationDate
      - modifiedDate
    properties:
      itemId:
        description: The id of the item watched.
        type: string
      position:
        description: The last playhead position watched for the item.
        type: integer
        format: int32
      creationDate:
        type: string
        format: date
      modifiedDate:
        type: string
        format: date
parameters:
  DeviceTypes:
    name: device
    description: The type of device the content is targeting.
    in: query
    default: web_desktop
    type: string
    enum:
      - web_desktop
      - web_tablet
      - web_mobile
      - web_tv
      - apple_desktop
      - apple_tablet
      - apple_mobile
      - apple_tv
      - android_desktop
      - android_tablet
      - android_mobile
      - android_tv
  ItemTypes:
    name: item_type
    description: The item type to filter by. Defaults to unspecified.
    in: query
    type: string
    enum:
      - movie
      - show
      - season
      - episode
      - link
      - trailer
  SortOrder:
    name: order
    in: query
    type: string
    description: The sort order of the returned list, either 'asc' or 'desc'. Defaults to unspecified.
    enum:
      - asc
      - desc
  Subscriptions:
    name: sub
    description: A comma delimited list of subscription codes.
    in: query
    type: array
    items:
      type: string
    collectionFormat: csv
responses:
  NotFound:
    description: Entity not found
